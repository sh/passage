// Generated by CoffeeScript 1.9.1
var passage;

passage = require('../src/passage');

module.exports = {
  'router': {
    'matching method and matching url': function(test) {
      var middleware, req, res;
      middleware = passage.get('/users', function(req, res) {
        return test.done();
      });
      req = {
        url: '/users',
        method: 'get'
      };
      res = {};
      return middleware(req, res, function() {
        return test.fail();
      });
    },
    'head is handled like a get': function(test) {
      var middleware, req, res;
      middleware = passage.get('/users', function(req, res) {
        return test.done();
      });
      req = {
        url: '/users',
        method: 'head'
      };
      res = {};
      return middleware(req, res, function() {
        return test.fail();
      });
    },
    'ignore query part of url': function(test) {
      var middleware, req, res;
      middleware = passage.get('/users', function(req, res) {
        return test.done();
      });
      req = {
        url: '/users?age=27',
        method: 'get'
      };
      res = {};
      return middleware(req, res, function() {
        return test.fail();
      });
    },
    'any method and matching url': function(test) {
      var middleware, req, res;
      middleware = passage.any('/users', function(req, res) {
        return test.done();
      });
      req = {
        url: '/users',
        method: 'get'
      };
      res = {};
      return middleware(req, res, function() {
        return test.fail();
      });
    },
    'not matching method and matching url': function(test) {
      var middleware, req, res;
      middleware = passage.post('/users', function(req, res) {
        return test.fail();
      });
      req = {
        url: '/users',
        method: 'get'
      };
      res = {};
      return middleware(req, res, function() {
        return test.done();
      });
    },
    'matching method and not matching url': function(test) {
      var middleware, req, res;
      middleware = passage.get('/users', function(req, res) {
        return test.fail();
      });
      req = {
        url: '/projects',
        method: 'get'
      };
      res = {};
      return middleware(req, res, function() {
        return test.done();
      });
    },
    'params are passed to handler': function(test) {
      var middleware, req, res;
      middleware = passage.get('/users/:userId/posts/:postId', function(req, res, next, params) {
        test.deepEqual(params, {
          userId: '8',
          postId: '120'
        });
        return test.done();
      });
      req = {
        url: '/users/8/posts/120',
        method: 'get'
      };
      res = {};
      return middleware(req, res, function() {
        return test.fail();
      });
    },
    'PATCH': function(test) {
      var middleware, req, res;
      middleware = passage.patch('/users/:id', function(req, res, next, params) {
        test.deepEqual(params, {
          id: '8'
        });
        return test.done();
      });
      req = {
        url: '/users/8',
        method: 'patch'
      };
      res = {};
      return middleware(req, res, function() {
        return test.fail();
      });
    }
  },
  'vhost': {
    'match': function(test) {
      var middleware, req, res;
      middleware = passage.vhost(':sub.example.:tld', function(req, res, next, params) {
        test.deepEqual(params, {
          sub: 'www',
          tld: 'com'
        });
        return test.done();
      });
      req = {
        headers: {
          host: 'www.example.com'
        }
      };
      res = {};
      return middleware(req, res, function() {
        return test.fail();
      });
    },
    'no match': function(test) {
      var middleware, req, res;
      middleware = passage.vhost(':sub.example.:tld', function(req, res) {
        return test.fail();
      });
      req = {
        headers: {
          host: 'www.google.com'
        }
      };
      res = {};
      return middleware(req, res, function() {
        return test.done();
      });
    }
  }
};
